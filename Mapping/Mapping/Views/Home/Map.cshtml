@model Mapping.Models.MapLocationModel

@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p></p>

<div>
    @using (Html.BeginForm("Map", "Home", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", autocomplete = "off" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-group">
            @Html.LabelFor(m => m.mapLocation.PlaceName, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.mapLocation.PlaceName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.mapLocation.PlaceName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.mapLocation.Address, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.mapLocation.Address, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.mapLocation.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <div onclick="javascript:AddMarker()" class="btn btn-default pull-left">Save to Map</div> <div id="addMarkerStatus"></div>
            </div>
        </div>
    }
</div>


<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

<div id="map_canvas" style="height: 600px;"></div>

@section scripts {
    <section class="scripts">
        <script type="text/javascript">

            var gm = google.maps;
            var map = null;
            var oms = null;

            $(document).ready(function () {
                Initialize();
            });

            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                gm.visualRefresh = true;

                var AustraliaCentre = new gm.LatLng(-24.303423, 134.130571);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 4,
                    center: AustraliaCentre,
                    mapTypeId: gm.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                map = new gm.Map(document.getElementById("map_canvas"), mapOptions);
                oms = new OverlappingMarkerSpiderfier(map);

                // a list of JSON encoded data of places
                var data = @Html.Raw(Model.mapLocationsJson)

                // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
                $.each(data, function (i, item) {

                    var marker = new gm.Marker({
                        'position': new gm.LatLng(item.LatLng.Latitude, item.LatLng.Longitude),
                        'map': map,
                        'title': item.PlaceName,
                        'icon': 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                    });

                    //// put in some information about each json object - in this case, the opening hours.
                    var infowindow = new gm.InfoWindow({
                        content: "<div class='infoDiv'><h2>" + item.PlaceName + "</h2><a href='http://www.google.com'>fish</a></div>"
                    });


                    ////finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                    google.maps.event.addListener(marker, 'click', function () {
                        infowindow.open(map, marker);
                    });

                    //oms.addListener('click', function (marker,event) {
                    //    infowindow.open(map, marker);
                    //});

                    oms.addListener('spiderfy', function (markers) {
                        infowindow.close();
                    })

                    oms.addMarker(marker);
                });
            }

            function AddMarker() {
                var placeName = document.getElementById("mapLocation_PlaceName").value;
                var address = document.getElementById("mapLocation_Address").value;
                $.ajax({
                    type: "POST",
                    url: '/Home/AddMarker',
                    dataType: "json",  //html
                    data: {
                        'PlaceName': placeName,
                        'Address': address
                    },
                    success: function (result) {
                        if (jQuery.isEmptyObject(result)) {
                            AddMarkerError(); 
                        } else {
                            AddMarkerSuccess(result);
                        }
                    },
                    error: function (request, status, error) {
                        AddMarkerError();
                    }
                });
            }

            function AddMarkerSuccess(location) {
                PutMarkerOnMap(location.PlaceName, location.Address, location.LatLng.Latitude, location.LatLng.Longitude);
                var placeName = document.getElementById("mapLocation_PlaceName");
                var address = document.getElementById("mapLocation_Address");
                document.getElementById("addMarkerStatus").innerHTML = "<p class=\"text-success\"><strong>Saved " + placeName.value + " to map!</strong></p>";
                placeName.value = "";
                address.value = "";
            }

            function AddMarkerError() {
                document.getElementById("addMarkerStatus").innerHTML = "<p class=\"text-danger\"><strong>Failure!</strong></p>";
            }

            function PutMarkerOnMap(placeName, address, latitude, longitude) {
                var marker = new gm.Marker({
                    'position': new gm.LatLng(latitude, longitude),
                    'map': map,
                    'title': placeName,
                    'icon': 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                });

                var infowindow = new gm.InfoWindow({
                    content: "<div class='infoDiv'><h2>" + placeName + "</h2><a href='http://www.google.com'>fish</a></div>"
                });

                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });

                oms.addListener('spiderfy', function (markers) {
                    infowindow.close();
                })

                oms.addMarker(marker);
            }

        </script>
    </section>
}