@model Mapping.Models.MappingModel

@{
    ViewBag.Title = "Home Page";
}

<p></p>

<div>
    @using (Html.BeginForm("Index", "Home", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form",autocomplete="off" }))
    {
        @Html.AntiForgeryToken()
        
        <div class="form-group">        
            @Html.LabelFor(m => m.mapLocation.PlaceName, new { @class = "col-sm-2 control-label" }) 
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.mapLocation.PlaceName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">        
            @Html.LabelFor(m => m.mapLocation.Address, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-10">
                @Html.TextBoxFor(m => m.mapLocation.Address, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-default">Submit</button>
            </div>
        </div>
    }
</div>

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

<div id="map_canvas" style="height: 600px;"></div>

@section scripts {
    <section class="scripts">

        <script type="text/javascript">

            $(document).ready(function () {
                Initialize();
            });
            
        function Initialize() {

            // Google has tweaked their interface somewhat - this tells the api to use that new UI
            google.maps.visualRefresh = true;
         
            var AustraliaCentre = new google.maps.LatLng(-24.303423, 134.130571);

            // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
            var mapOptions = {
                zoom: 4,
                center: AustraliaCentre,
                mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
            };

            // This makes the div with id "map_canvas" a google map
            var gm = new google.maps;

            var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

            // a list of JSON encoded data of places 
            var data = @Html.Raw(Model.mapLocationsJson)

            // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
            $.each(data, function (i, item) {
                var marker = new google.maps.Marker({
                    'position': new google.maps.LatLng(item.LatLng.Latitude, item.LatLng.Longitude),
                    'map': map,
                    'title': item.PlaceName
                });

                // Make the marker-pin blue!
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

                // put in some information about each json object - in this case, the opening hours.
                var infowindow = new google.maps.InfoWindow({
                    content: "<div class='infoDiv'><h2>" + item.PlaceName + "</h2>" + "<div><h4>Opening hours: sometime </h4></div></div>"
                });

                // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });

            })
          
    }


        </script>
    </section>
}