@model Mapping.Models.MapModel

@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p></p>

@if (Request.IsAuthenticated) { 
    <div>
        @using (Html.BeginForm("Index", "Map", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.LabelFor(m => m.mapLocation.PlaceName, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.mapLocation.PlaceName, new { @class = "form-control", @tabindex = "1" })
                    @Html.ValidationMessageFor(m => m.mapLocation.PlaceName, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(m => m.mapLocation.LatLng.Latitude, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.mapLocation.LatLng.Latitude, new { @class = "form-control", @tabindex = "3" })
                    @Html.ValidationMessageFor(m => m.mapLocation.LatLng.Latitude, "", new { @class = "text-danger" })
                </div>
            </div>
        
            <div class="form-group">
                @Html.LabelFor(m => m.mapLocation.Address, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.mapLocation.Address, new { @class = "form-control popover-dismiss", data_toggle = "popover", data_content = "<div class='text-warning'>Changing the address will not change the marker location while Latitude and Longitude are set.</div>", onfocus = "AddressWarning()", onblur = "AddressWarningOff()", @tabindex = "2" })
                    @Html.ValidationMessageFor(m => m.mapLocation.Address, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(m => m.mapLocation.LatLng.Longitude, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.mapLocation.LatLng.Longitude, new { @class = "form-control", @tabindex = "4" })
                    @Html.ValidationMessageFor(m => m.mapLocation.LatLng.Longitude, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-4 col-sm-offset-2">
                    <div id="btnClearMap" class="btn btn-danger" data-toggle="modal" data-target="#clearMapModal">Clear Map</div>
                    <div id="btnSaveMarker" tabindex="5" onclick="javascript:SaveMarker()" class="btn btn-primary popover-dismiss" data-toggle="popover" data-content="">Save to Map</div>
                    <div id="btnReset" onclick="javascript: Reset()" class="btn btn-warning">Reset</div> <div id="addMarkerStatus"></div>
                </div>

                @if (Model.mapDetail.MapPublicAllowed == true)
                { 
                    @Html.Label("Read Only Map", new { @class = "col-sm-2 control-label"})
                    <div class="col-sm-4">
                        http://@(Request.Url.Authority)/Map/MapView/@(Model.mapDetail.MapId)
                    </div>
                }
            </div>
        }
    </div>
    
    <!-- Modal clearMap -->
    <div class="modal fade" id="clearMapModal" tabindex="-1" role="dialog" aria-labelledby="clearMapModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        @using (Html.BeginForm("Clear", "Map", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" }))
        {
            @Html.AntiForgeryToken()

            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="clearMapModalLabel">Clear Map</h4>
              </div>
              <div class="modal-body">
                <p>Are you sure you want to remove all markers from the map '@(Model.mapDetail.MapName)'?</p>
                <br />
                <p class="text-danger"><strong>This action can not be undone!</strong></p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-danger">Clear Map</button>
              </div>
            </div>
        }
      </div>
    </div>    
    
    <!-- Modal deleteMarker -->
    <div class="modal fade" id="deleteMarkerModal" tabindex="-1" role="dialog" aria-labelledby="deleteMarkerModalLabel" aria-hidden="true">
      <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="deleteMarkerModalLabel">Delete Marker</h4>
              </div>
              <div class="modal-body">
                <p>Are you sure you want to delete the marker for:<div id="deletePlaceName"></div></p>
                <br />
                <p class="text-danger"><strong>This action can not be undone!</strong></p>
              </div>
              <div class="modal-footer">
                <div id="deleteMarkerStatus"></div>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" id="deleteMarkerBtn" class="btn btn-danger">Delete Marker</button>
              </div>
            </div>
      </div>
    </div>    
}
else
{
    <div style="height: 132px;"></div>
}

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

<div id="map_canvas" style="height: 600px;"></div>

@section scripts {
    <section class="scripts">
        <script type="text/javascript">

            var gm = google.maps;
            var map = null;
            var oms = null;
            var allMarkers = [];

            $(document).ready(function () {
                Initialize();
                document.getElementById("mapLocation_PlaceName").focus();

                $("#mapLocation_Address").popover({
                    html: true,
                    placement: 'bottom',
                    trigger: 'manual'
                });

                $("#btnSaveMarker").popover({
                    html: true,
                    placement: 'bottom',
                    trigger: 'manual',
                    template: '<div class="popover" onmouseover="$(this).mouseleave(function() {$(this).hide(); });"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"></div></div></div>'
                });

                $('.popover-dismiss').popover({
                    trigger: 'focus'
                });

                $("#mapLocation_Address").keypress(function (event) {
                    if (event.which == 13) {
                        $("#btnSaveMarker").click();
                    } 
                });

                $("#mapLocation_PlaceName").keypress(function (event) {
                    if (event.which == 13) {
                        $("#btnSaveMarker").click();
                    }
                });

            });

            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                gm.visualRefresh = true;

                var AustraliaCentre = new gm.LatLng(-24.303423, 134.130571);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 4,
                    center: AustraliaCentre,
                    mapTypeId: gm.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                map = new gm.Map(document.getElementById("map_canvas"), mapOptions);
                oms = new OverlappingMarkerSpiderfier(map);

                // a list of JSON encoded data of places
                var data = @Html.Raw(Model.mapLocationsJson)

                // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
                $.each(data, function (i, item) {
                    if (i == 0) {
                        map.panTo(new gm.LatLng(item.LatLng.Latitude, item.LatLng.Longitude));
                    }
                    PutMarkerOnMap(item.PlaceName, item.Address, item.LatLng.Latitude, item.LatLng.Longitude, item.MarkerId);
                });


                google.maps.event.addListener(map,'click',function(event)
                {
                    geocoder = new google.maps.Geocoder();
                    geocoder.geocode({ 'latLng': event.latLng }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK || status == google.maps.GeocoderStatus.ZERO_RESULTS) {
                            if (results[0]) {
                                var addressObject = {};
                                var addressText = "";
                                var components = results[0].address_components;
                                for (var i = 0 ; i < components.length ; i++) {
                                    addressObject[components[i].types[0]] = components[i].long_name;
                                    addressText = addressText + components[i].long_name +' ';
                                }

                                document.getElementById("mapLocation_Address").value = addressText;
                                document.getElementById("mapLocation_LatLng_Latitude").value = event.latLng.lat();
                                document.getElementById("mapLocation_LatLng_Longitude").value = event.latLng.lng();
                                //alert(addressText);

                            } else {
                                //alert('No results found');
                                document.getElementById("mapLocation_Address").value = "Unknown";
                                document.getElementById("mapLocation_LatLng_Latitude").value = event.latLng.lat();
                                document.getElementById("mapLocation_LatLng_Longitude").value = event.latLng.lng();
                            }
                        } else {
                            if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                                alert('Slow down your clicking!');
                            } else {
                                alert('Unable to process map location (' + status +')');
                            }
                        }
                    });
                    document.getElementById("mapLocation_PlaceName").focus();
                });
            }

            function AddressWarning()
            {
                var lat = document.getElementById("mapLocation_LatLng_Latitude").value;
                var lng = document.getElementById("mapLocation_LatLng_Longitude").value;
                if (lat.length>1 || lng.length>1)
                {
                    $("#mapLocation_Address").popover('show');
                }
            }

            function AddressWarningOff()
            {
                $("#mapLocation_Address").popover('hide');
            }

            function Reset()
            {
                document.getElementById("mapLocation_PlaceName").value = "";
                document.getElementById("mapLocation_Address").value = "";
                document.getElementById("mapLocation_LatLng_Latitude").value = "";
                document.getElementById("mapLocation_LatLng_Longitude").value = "";
                document.getElementById("addMarkerStatus").innerHTML = "";
            }


            function SaveMarker() {
                var placeName = document.getElementById("mapLocation_PlaceName").value;
                var address = document.getElementById("mapLocation_Address").value;
                var latitude = document.getElementById("mapLocation_LatLng_Latitude").value;
                var longitude = document.getElementById("mapLocation_LatLng_Longitude").value;
                $.ajax({
                    type: "POST",
                    url: '/Map/AddMarker',
                    dataType: "json",  //html
                    data: {
                        'PlaceName': placeName,
                        'Address': address,
                        'Latitude': latitude,
                        'Longitude': longitude
                    },
                    success: function (result) {
                        if (jQuery.isEmptyObject(result)) {
                            SaveMarkerError(); 
                        } else {
                            if (result.Status == true) {
                                SaveMarkerSuccess(result.Location);
                            } else {
                                SaveMarkerError(result.Text);
                            }
                        }
                    },
                    error: function (request, status, error) {
                        SaveMarkerError();
                    }
                });
            }

            function SaveMarkerSuccess(location) {
                PutMarkerOnMap(location.PlaceName, location.Address, location.LatLng.Latitude, location.LatLng.Longitude,location.MarkerId);
                var placeName = document.getElementById("mapLocation_PlaceName").value;
                Reset();
                $("#btnSaveMarker").attr('data-content', "<p class='text-success'>Saved " + placeName + " to map!</p>");
                $("#btnSaveMarker").popover('show');
                document.getElementById("mapLocation_PlaceName").focus();
            }

            function SaveMarkerError(errorText) {
                $("#btnSaveMarker").attr('data-content', "<p class='text-danger'>" + errorText + "</p>");
                $("#btnSaveMarker").popover('show');
            }

            function PutMarkerOnMap(placeName, address, latitude, longitude, markerId) {
                var marker = new gm.Marker({
                    'position': new gm.LatLng(latitude, longitude),
                    'map': map,
                    'title': placeName,
                    'animation':gm.Animation.DROP,
                    'icon': 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                });
                marker.set("id", markerId);

                var infowindow = new gm.InfoWindow({
                    content: "<div ><h2>" + placeName + "</h2><p>"+address+"</p><p>Latitude:"+ latitude +"</p><p>Longitude:"+ longitude +"</p></div>"
                });

                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });

                google.maps.event.addListener(marker, "rightclick", function () {
                    // Reset modal colours, messages etc
                    document.getElementById("deleteMarkerStatus").innerHTML = "";
                    document.getElementById("deleteMarkerBtn").className = "btn btn-danger";
                    document.getElementById("deleteMarkerBtn").innerHTML = "Delete";

                    document.getElementById("deletePlaceName").innerHTML = "<h2>" + marker.getTitle()+ "</h2>";
                    document.getElementById("deleteMarkerBtn").onclick = function () { DeleteMarker(markerId); }
                    $("#deleteMarkerModal").modal('show');
                });

                oms.addListener('spiderfy', function (markers) {
                    infowindow.close();
                })

                oms.addMarker(marker);

                allMarkers.push(marker);
            }

            function DeleteMarker(markerId)
            {
                $.ajax({
                    type: "POST",
                    url: '/Map/DeleteMarker',
                    dataType: "json",  //html
                    data: {
                        'MarkerId': markerId
                    },
                    success: function (result) {
                        if (result == true) {
                            RemoveMarkerFromMap(markerId);
                            document.getElementById("deleteMarkerStatus").innerHTML = "<p class='text-success'>Marker has been removed</p>";
                        } else {
                            document.getElementById("deleteMarkerStatus").innerHTML = "<p class='text-danger'>Unable to remove marker</p>";
                        }
                    },
                    error: function (request, status, error) {
                        document.getElementById("deleteMarkerStatus").innerHTML = "<p class='text-danger'>Error in attempting to delete marker</p>";
                    }
                });

                document.getElementById("deleteMarkerBtn").className = "btn btn-primary";
                document.getElementById("deleteMarkerBtn").innerHTML = "Done";
                document.getElementById("deleteMarkerBtn").onclick = function() { $("#deleteMarkerModal").modal('hide'); }
                
            }

            function RemoveMarkerFromMap(markerId)
            {
                for (var i = 0; i < allMarkers.length; i++) {
                    var marker = allMarkers[i];
                    var id = marker.get("id");
                    if (id == markerId) {
                        marker.setMap(null);
                    }
                }
            }

        </script>
    </section>
}