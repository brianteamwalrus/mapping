@model Mapping.Models.MapModel

@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<p></p>

@if (Request.IsAuthenticated) { 
<div>
    @using (Html.BeginForm("Index", "Map", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", autocomplete = "off" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-group">
            @Html.LabelFor(m => m.mapLocation.PlaceName, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.mapLocation.PlaceName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.mapLocation.PlaceName, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(m => m.mapLocation.LatLng.Latitude, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.mapLocation.LatLng.Latitude, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.mapLocation.LatLng.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(m => m.mapLocation.Address, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.mapLocation.Address, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.mapLocation.Address, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(m => m.mapLocation.LatLng.Longitude, new { @class = "col-sm-2 control-label" })
            <div class="col-sm-4">
                @Html.TextBoxFor(m => m.mapLocation.LatLng.Longitude, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.mapLocation.LatLng.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <div id="btnSaveMarker" onclick="javascript:SaveMarker()" class="btn btn-default pull-left">Save to Map</div>
                <div id="btnReset" onclick="javascript: Reset()" class="btn btn-default pull-left">Reset</div> <div id="addMarkerStatus"></div>
            </div>
        </div>
    }
</div>
}
else
{
    <div style="height: 132px;"></div>
}

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>

<div id="map_canvas" style="height: 600px;"></div>

@section scripts {
    <section class="scripts">
        <script type="text/javascript">

            var gm = google.maps;
            var map = null;
            var oms = null;

            $(document).ready(function () {
                Initialize();
                document.getElementById("mapLocation_PlaceName").focus();

                $("#mapLocation_Address").keypress(function (event) {
                    if (event.which == 13) {
                        $("#btnSaveMarker").click();
                    }
                });

            });

            function Initialize() {

                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                gm.visualRefresh = true;

                var AustraliaCentre = new gm.LatLng(-24.303423, 134.130571);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 4,
                    center: AustraliaCentre,
                    mapTypeId: gm.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                map = new gm.Map(document.getElementById("map_canvas"), mapOptions);
                oms = new OverlappingMarkerSpiderfier(map);

                // a list of JSON encoded data of places
                var data = @Html.Raw(Model.mapLocationsJson)

                // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
                $.each(data, function (i, item) {

                    PutMarkerOnMap(item.PlaceName, item.Address, item.LatLng.Latitude, item.LatLng.Longitude, item.MarkerId);

                });


                google.maps.event.addListener(map,'click',function(event)
                {
                    geocoder = new google.maps.Geocoder();
                    geocoder.geocode({ 'latLng': event.latLng }, function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK || status == google.maps.GeocoderStatus.ZERO_RESULTS) {
                            if (results[0]) {
                                var addressObject = {};
                                var addressText = "";
                                var components = results[0].address_components;
                                for (var i = 0 ; i < components.length ; i++) {
                                    addressObject[components[i].types[0]] = components[i].long_name;
                                    addressText = addressText + components[i].long_name +' ';
                                }

                                document.getElementById("mapLocation_Address").value = addressText;
                                document.getElementById("mapLocation_LatLng_Latitude").value = event.latLng.lat();
                                document.getElementById("mapLocation_LatLng_Longitude").value = event.latLng.lng();
                                //alert(addressText);

                            } else {
                                //alert('No results found');
                                document.getElementById("mapLocation_Address").value = "Unknown";
                                document.getElementById("mapLocation_LatLng_Latitude").value = event.latLng.lat();
                                document.getElementById("mapLocation_LatLng_Longitude").value = event.latLng.lng();
                            }
                        } else {
                            alert('Geocoder failed due to:' + status);
                        }
                    });
                });
            }

            function Reset()
            {
                document.getElementById("mapLocation_PlaceName").value = "";
                document.getElementById("mapLocation_Address").value = "";
                document.getElementById("mapLocation_LatLng_Latitude").value = "";
                document.getElementById("mapLocation_LatLng_Longitude").value = "";
                document.getElementById("addMarkerStatus").innerHTML = "";
            }


            function SaveMarker() {
                var placeName = document.getElementById("mapLocation_PlaceName").value;
                var address = document.getElementById("mapLocation_Address").value;
                var latitude = document.getElementById("mapLocation_LatLng_Latitude").value;
                var longitude = document.getElementById("mapLocation_LatLng_Longitude").value;
                $.ajax({
                    type: "POST",
                    url: '/Map/AddMarker',
                    dataType: "json",  //html
                    data: {
                        'PlaceName': placeName,
                        'Address': address,
                        'Latitude': latitude,
                        'Longitude': longitude
                    },
                    success: function (result) {
                        if (jQuery.isEmptyObject(result)) {
                            SaveMarkerError(); 
                        } else {
                            SaveMarkerSuccess(result);
                        }
                    },
                    error: function (request, status, error) {
                        SaveMarkerError();
                    }
                });
            }

            function SaveMarkerSuccess(location) {
                PutMarkerOnMap(location.PlaceName, location.Address, location.LatLng.Latitude, location.LatLng.Longitude);
                var placeName = document.getElementById("mapLocation_PlaceName").value;
                Reset();
                document.getElementById("addMarkerStatus").innerHTML = "<p class=\"text-success\"><strong>Saved " + placeName + " to map!</strong></p>";
                document.getElementById("mapLocation_PlaceName").focus();
            }

            function SaveMarkerError() {
                document.getElementById("addMarkerStatus").innerHTML = "<p class=\"text-danger\"><strong>Failure!</strong></p>";
            }

            function PutMarkerOnMap(placeName, address, latitude, longitude, markerId) {
                var marker = new gm.Marker({
                    'position': new gm.LatLng(latitude, longitude),
                    'map': map,
                    'title': placeName,
                    'animation':gm.Animation.DROP,
                    'icon': 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                });

                var infowindow = new gm.InfoWindow({
                    content: "<div class='infoDiv'><h2>" + placeName + "</h2><a href='http://www.google.com'>"+markerId+"</a></div>"
                });

                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.open(map, marker);
                });

                oms.addListener('spiderfy', function (markers) {
                    infowindow.close();
                })

                oms.addMarker(marker);
            }

        </script>
    </section>
}